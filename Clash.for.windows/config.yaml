parsers: # array
  # - reg: ^.*$ 匹配所有订阅，或  - url: https://example.com/profile.yaml 指定订阅
  - reg: ^.*$

    code: |
      module.exports.parse = (raw, { yaml }) => {

        const rawObj = yaml.parse(raw);

        const hongKongRegex = /^(.*)(香港|🇭🇰|HK|Hong)+(.*)$/i;
        const hongKongProxies = rawObj['proxy-groups'].reduce((acc, cur) => {
          if (cur.proxies) {
            acc.push(...cur.proxies.filter(proxy => typeof proxy === 'string' && hongKongRegex.test(proxy) && !acc.includes(proxy)));
          }
          return acc;
        }, []);

        const taiwanRegex = /^(.*)(台湾|🇹🇼|TW|Taiwan)+(.*)$/i;
        const taiwanProxies = rawObj['proxy-groups'].reduce((acc, cur) => {
          if (cur.proxies) {
            acc.push(...cur.proxies.filter(proxy => typeof proxy === 'string' && taiwanRegex.test(proxy) && !acc.includes(proxy)));
          }
          return acc;
        }, []);

        const japanRegex = /^(.*)(日本|🇯🇵|JP|Japan)+(.*)$/i;
        const japanProxies = rawObj['proxy-groups'].reduce((acc, cur) => {
          if (cur.proxies) {
            acc.push(...cur.proxies.filter(proxy => typeof proxy === 'string' && japanRegex.test(proxy) && !acc.includes(proxy)));
          }
          return acc;
        }, []);

        const americaRegex = /^(.*)(美国|🇺🇸|US|United States|American)+(.*)$/i;
        const americaProxies = rawObj['proxy-groups'].reduce((acc, cur) => {
          if (cur.proxies) {
            acc.push(...cur.proxies.filter(proxy => typeof proxy === 'string' && americaRegex.test(proxy) && !acc.includes(proxy)));
          }
          return acc;
        }, []);

        const singaporeRegex = /^(.*)(新加坡|狮城|🇸🇬|SG|Singapore)+(.*)$/i;
        const singaporeProxies = rawObj['proxy-groups'].reduce((acc, cur) => {
          if (cur.proxies) {
            acc.push(...cur.proxies.filter(proxy => typeof proxy === 'string' && singaporeRegex.test(proxy) && !acc.includes(proxy)));
          }
          return acc;
        }, []);

        const groups = [
          {
            name: 'HK 香港',
            type: 'url-test',
            url: 'http://www.gstatic.com/generate_204',
            interval: 300,
            tolerance: 30,
            proxies: hongKongProxies.length > 0 ? [...hongKongProxies] : ['DIRECT']

          },
          {
            name: 'TW 台湾',
            type: 'url-test',
            url: 'http://www.gstatic.com/generate_204',
            interval: 300,
            tolerance: 30,
            proxies: taiwanProxies.length > 0 ? [...taiwanProxies] : ['DIRECT']
          },
          {
            name: 'US 美国',
            type: 'url-test',
            url: 'http://www.gstatic.com/generate_204',
            interval: 300,
            tolerance: 30,
            proxies: americaProxies.length > 0 ? [...americaProxies] : ['DIRECT']
          },
          {
            name: 'JP 日本',
            type: 'url-test',
            url: 'http://www.gstatic.com/generate_204',
            interval: 300,
            tolerance: 30,
            proxies: japanProxies.length > 0 ? [...japanProxies] : ['DIRECT']
          },
          {
            name: 'SG 狮城',
            type: 'url-test',
            url: 'http://www.gstatic.com/generate_204',
            interval: 300,
            tolerance: 30,
            proxies: singaporeProxies.length > 0 ? [...singaporeProxies] : ['DIRECT']
          },
        ];

        const rules = [];

        return yaml.stringify({ ...rawObj, 'proxy-groups': groups, rules });
      }

  # 建立自己的配置
    yaml:
      prepend-proxy-groups: # 建立策略组
        - name: 🎏 Proxy mode
          type: select
          proxies:
            - 💊 GFWlist # 黑名单模式，意为「只有命中规则的网络流量，才使用代理」
            - 🩹 Whitelist # 白名单模式，意为「没有命中规则的网络流量，统统使用代理」

        - name: 🚀 PROXY
          type: select

        - name: 🎮 Steam
          type: select
          proxies: &M
            - 🎯 DIRECT
            - 🚀 PROXY
            - ♻️ Auto
            - ⚖️ Balance
            - 🛠️ Failover
            - HK 香港
            - TW 台湾
            - US 美国
            - JP 日本
            - SG 狮城

        - name: 🍻 BiliBili
          type: select
          proxies:
            - 🎯 DIRECT
            - HK 香港
            - TW 台湾

        - name: 🍷 Youtube
          type: select
          proxies:
            *M

        - name: ⚛️ GitHub
          type: select
          proxies:
            *M

        - name: 📲 Telegram
          type: select
          proxies:
            *M

        - name: 🤖 OpenAI
          type: select
          proxies:
            *M

        - name: ✨ Google
          type: select
          proxies:
            *M

        - name: Ⓜ️ Microsoft
          type: select
          proxies:
            *M

        - name: 🍎 Apple
          type: select
          proxies:
            *M

        - name: 💊 GFWlist
          type: url-test
          url: http://www.gstatic.com/generate_204
          interval: 86400
          proxies:
            - 🎯 DIRECT

        - name: 🩹 Whitelist
          type: url-test
          url: http://www.gstatic.com/generate_204
          interval: 86400
          proxies:
            - 🚀 PROXY

        - name: 🎯 DIRECT
          type: url-test
          url: http://www.gstatic.com/generate_204
          interval: 86400
          proxies:
            - DIRECT

        - name: ♻️ Auto
          type: url-test
          url: http://www.gstatic.com/generate_204
          interval: 300
          tolerance: 30

        - name: ⚖️ Balance
          type: load-balance
          url: http://www.gstatic.com/generate_204
          interval: 300
          tolerance: 30

        - name: 🛠️ Failover
          type: fallback
          url: http://www.gstatic.com/generate_204
          interval: 300
          tolerance: 30

      commands:
        - proxy-groups.🚀 PROXY.proxies=[]proxyNames|^((?!官网|套餐|流量|机场|订阅).)*$
        - proxy-groups.🚀 PROXY.proxies.0+♻️ Auto
        - proxy-groups.🚀 PROXY.proxies.1+⚖️ Balance
        - proxy-groups.🚀 PROXY.proxies.2+🛠️ Failover
        - proxy-groups.♻️ Auto.proxies=[]proxyNames|^((?!官网|套餐|流量|机场|订阅).)*$
        - proxy-groups.⚖️ Balance.proxies=[]proxyNames|^((?!官网|套餐|流量|机场|订阅).)*$
        - proxy-groups.🛠️ Failover.proxies=[]proxyNames|^((?!官网|套餐|流量|机场|订阅).)*$

        # 一些可能用到的正则过滤节点示例，使分组更细致
        # []proxyNames|a                         # 包含a
        # []proxyNames|^(.*)(a|b)+(.*)$          # 包含a或b
        # []proxyNames|^(?=.*a)(?=.*b).*$        # 包含a和b
        # []proxyNames|^((?!b).)*a((?!b).)*$     # 包含a且不包含b
        # []proxyNames|^((?!b|c).)*a((?!b|c).)*$ # 包含a且不包含b或c

      prepend-rules: # 规则由上往下遍历，如上面规则已经命中，则不再往下处理
        - RULE-SET,Steam,🎮 Steam
        - RULE-SET,GitHub,⚛️ GitHub
        - RULE-SET,Apple,🍎 Apple
        - RULE-SET,Youtube,🍷 Youtube
        - RULE-SET,OpenAI,🤖 OpenAI
        - RULE-SET,BiliBili,🍻 BiliBili
        - RULE-SET,telegramcidr,📲 Telegram,no-resolve
        - RULE-SET,Microsoft,Ⓜ️ Microsoft
        - RULE-SET,Google,✨ Google
        - RULE-SET,applications,🎯 DIRECT
        - RULE-SET,private,🎯 DIRECT
        - RULE-SET,lancidr,🎯 DIRECT,no-resolve
        - RULE-SET,cncidr,🎯 DIRECT,no-resolve
        - RULE-SET,tld-not-cn,🚀 PROXY
        - RULE-SET,gfw,🚀 PROXY
        - RULE-SET,greatfire,🚀 PROXY
        - GEOIP,CN,🎯 DIRECT,no-resolve
        - RULE-SET,direct,🎯 DIRECT
        - RULE-SET,proxy,🎏 Proxy mode
        - MATCH,🎏 Proxy mode

      mix-rule-providers: # 添加规则集
          proxy:
            type: http
            behavior: domain
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/proxy.txt"
            interval: 86400

          direct:
            type: http
            behavior: domain
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/direct.txt"
            interval: 86400

          private:
            type: http
            behavior: domain
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/private.txt"
            interval: 86400

          gfw:
            type: http
            behavior: domain
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/gfw.txt"
            interval: 86400

          greatfire:
            type: http
            behavior: domain
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/greatfire.txt"
            interval: 86400

          tld-not-cn:
            type: http
            behavior: domain
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/tld-not-cn.txt"
            interval: 86400

          cncidr:
            type: http
            behavior: ipcidr
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/cncidr.txt"
            interval: 86400

          telegramcidr:
            type: http
            behavior: ipcidr
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/telegramcidr.txt"
            interval: 86400

          lancidr:
            type: http
            behavior: ipcidr
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/lancidr.txt"
            interval: 86400

          applications:
            type: http
            behavior: classical
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/applications.txt"
            interval: 86400

          Microsoft:
            type: http
            behavior: domain
            url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.yaml"
            interval: 86400

          Google:
            type: http
            behavior: domain
            url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.yaml"
            interval: 86400

          Apple:
            type: http
            behavior: domain
            url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple.yaml"
            interval: 86400

          OpenAI:
            type: http
            behavior: domain
            url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/openai.yaml"
            interval: 86400

          Youtube:
            type: http
            behavior: domain
            url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.yaml"
            interval: 86400

          BiliBili:
            type: http
            behavior: domain
            url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/bilibili.yaml"
            interval: 86400

          GitHub:
            type: http
            behavior: domain
            url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.yaml"
            interval: 86400

          Steam:
            type: http
            behavior: domain
            url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/steam.yaml"
            interval: 86400
